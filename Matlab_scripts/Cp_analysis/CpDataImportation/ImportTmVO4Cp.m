function [S] = ImportTmVO4Cp(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [TIMESTAMPSECONDS,COMMENT,SYSTEMSTATUSCODE,PUCKTEMPKELVIN,SYSTEMTEMPKELVIN,FIELDOERSTED,PRESSURETORR,SAMPLETEMPKELVIN,TEMPRISEKELVIN,SAMPHCJMOLEK,SAMPHCERRJMOLEK,ADDENDAHCJK,ADDENDAHCERRJK,TOTALHCJK,TOTALHCERRJK,FITDEVIATIONCHISQUARE,TIMECONSTTAU1SECONDS,TIMECONSTTAU2SECONDS,SAMPLECOUPLINGPERCENT,DEBYETEMPKELVIN,DEBYETEMPERRKELVIN,CALCORRECTIONFACTOR,THERMRESISTOHMS,HTRRESISTOHMS,PUCKRESISTOHMS,WIRECONDWK,MEASTIMESECONDS,TEMPSQUAREDK2,SAMPHCTEMPJMOLEKK,ADDENDAOFFSETHCJK]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [TIMESTAMPSECONDS,COMMENT,SYSTEMSTATUSCODE,PUCKTEMPKELVIN,SYSTEMTEMPKELVIN,FIELDOERSTED,PRESSURETORR,SAMPLETEMPKELVIN,TEMPRISEKELVIN,SAMPHCJMOLEK,SAMPHCERRJMOLEK,ADDENDAHCJK,ADDENDAHCERRJK,TOTALHCJK,TOTALHCERRJK,FITDEVIATIONCHISQUARE,TIMECONSTTAU1SECONDS,TIMECONSTTAU2SECONDS,SAMPLECOUPLINGPERCENT,DEBYETEMPKELVIN,DEBYETEMPERRKELVIN,CALCORRECTIONFACTOR,THERMRESISTOHMS,HTRRESISTOHMS,PUCKRESISTOHMS,WIRECONDWK,MEASTIMESECONDS,TEMPSQUAREDK2,SAMPHCTEMPJMOLEKK,ADDENDAOFFSETHCJK]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [TimeStampSeconds,Comment,SystemStatusCode,PuckTempKelvin,SystemTempKelvin,FieldOersted,PressureTorr,SampleTempKelvin,TempRiseKelvin,SampHCJmoleK,SampHCErrJmoleK,AddendaHCJK,AddendaHCErrJK,TotalHCJK,TotalHCErrJK,FitDeviationChiSquare,TimeConsttau1seconds,TimeConsttau2seconds,SampleCouplingPercent,DebyeTempKelvin,DebyeTempErrKelvin,CalCorrectionFactor,ThermResistOhms,HtrResistOhms,PuckResistOhms,WireCondWK,MeasTimeseconds,TempSquaredK2,SampHCTempJmoleKK,AddendaOffsetHCJK]
%   = importfile('TmVO4_RF-E_2017-07-14.dat',15, 1038);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/07/16 22:23:30

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 15;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: double (%f)
%	column2: text (%s)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: text (%s)
%	column24: text (%s)
%   column25: text (%s)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%s%s%s%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
S.TimeStampSeconds = dataArray{:, 1};
S.Comment = dataArray{:, 2};
S.SystemStatusCode = dataArray{:, 3};
S.PuckTempKelvin = dataArray{:, 4};
S.SystemTempKelvin = dataArray{:, 5};
S.FieldOersted = dataArray{:, 6};
S.PressureTorr = dataArray{:, 7};
S.SampleTempKelvin = dataArray{:, 8};
S.TempRiseKelvin = dataArray{:, 9};
S.SampHCJmoleK = dataArray{:, 10};
S.SampHCErrJmoleK = dataArray{:, 11};
S.AddendaHCJK = dataArray{:, 12};
S.AddendaHCErrJK = dataArray{:, 13};
S.TotalHCJK = dataArray{:, 14};
S.TotalHCErrJK = dataArray{:, 15};
S.FitDeviationChiSquare = dataArray{:, 16};
S.TimeConsttau1seconds = dataArray{:, 17};
S.TimeConsttau2seconds = dataArray{:, 18};
S.SampleCouplingPercent = dataArray{:, 19};
S.DebyeTempKelvin = dataArray{:, 20};
S.DebyeTempErrKelvin = dataArray{:, 21};
S.CalCorrectionFactor = dataArray{:, 22};
S.ThermResistOhms = dataArray{:, 23};
S.HtrResistOhms = dataArray{:, 24};
S.PuckResistOhms = dataArray{:, 25};
S.WireCondWK = dataArray{:, 26};
S.MeasTimeseconds = dataArray{:, 27};
S.TempSquaredK2 = dataArray{:, 28};
S.SampHCTempJmoleKK = dataArray{:, 29};
S.AddendaOffsetHCJK = dataArray{:, 30};


